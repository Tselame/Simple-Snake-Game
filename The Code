using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Snake_Game_Simple
{
class Circle
    {
        public int x { get; set; }
        public int y { get; set; }

        public Circle()
        {
            //this function resets the x and y to 0
            x = 0;
            y = 0;
        }
    }
 
 
 
    public partial class Form1 : Form
    {
        private List<Circle> Snake = new List<Circle>(); //Greating List Array for the snake
        private Circle food = new Circle(); //creatind a single circle class called food

        public Form1()
        {
            InitializeComponent();

            new Settings() ; //linking the settings Class to this form

            GameTimer.Interval = 1000 / Settings.Speed; //Changing game time to settings speed
            GameTimer.Tick += updateScreen; 
            GameTimer.Start(); //starts timer

            startGame(); //running the start game function
        }

        private void startGame()
        {
            //start game

            label3.Visible = false; //set label3 invisible
            new Settings(); //create new instance settings
            Snake.Clear(); //Clear all snake parts
            Circle head = new Circle { x = 10, y = 5 }; //Create new head to snake
            Snake.Add(head); //add the gead to the snake array?

            label2.Text = Settings.Score.ToString(); //show the score to label2
            generateFood(); //run the generate food function
        }

        private void generateFood()
        {
            int maxXpos = pbCanvas.Size.Width / Settings.Witdth;
            //create max x position int with half the size of the play area
            int maxYpos = pbCanvas.Size.Height / Settings.Height;

            Random rnd = new Random(); //create new random class
            food = new Circle { x = rnd.Next(0, maxXpos), y = rnd.Next(0, maxYpos) };
            //create new food with random x and y
        }
        private void eat()
        {
            //add part to body

            Circle body = new Circle
            {
                x = Snake[Snake.Count - 1].x,
                y = Snake[Snake.Count - 1].y
            };

            Snake.Add(body); //add part snake array
            Settings.Score += Settings.Points; //increase score
            label2.Text = Settings.Score.ToString(); //show the score on label2
            generateFood(); //run the generate food function
        }
        private void die()
        {
            //change the game over boolean to true
            Settings.GameOver = true;
        }

        private void updateScreen(object sender, EventArgs e)
        {
            //this is the Timers update screen function
            //each tic will run this function

            if (Settings.GameOver == true)
            {
                //if game over true and player presses enter
                //we run start game function

                if (Input.KeyPress(Keys.Enter))
                {
                    startGame();
                }
            }
            else
            {
                //if game not over, then following will be executed

                if (Input.KeyPress(Keys.Right) && Settings.direction != Directions.Left)
                {
                    Settings.direction = Directions.Right;
                }
                else if (Input.KeyPress(Keys.Left) && Settings.direction != Directions.Right)
                {
                    Settings.direction = Directions.Left;
                }
                else if (Input.KeyPress(Keys.Up) && Settings.direction != Directions.Down)
                {
                    Settings.direction = Directions.Up;
                }
                else if (Input.KeyPress(Keys.Down) && Settings.direction != Directions.Up)
                {
                    Settings.direction = Directions.Down;
                }

                movePlayer(); //run player function
            }

            pbCanvas.Invalidate(); //refresh the picture box update graphics on it
        }
        private void movePlayer()
        {
            //main loop for the snake head and parts
            for (int i = Snake.Count - 1; i >= 0; i--)
            {
                //if snake head is active
                if (i == 0)
                {
                    //move rest of the body according to which way to which way head is movingg
                    switch (Settings.direction)
                    {
                        case Directions.Right:
                            Snake[i].x++;
                            break;
                        case Directions.Left:
                            Snake[i].x++;
                            break;
                        case Directions.Up:
                            Snake[i].x++;
                            break;
                        case Directions.Down:
                            Snake[i].x++;
                            break;
                    }
                    //snake stays in boxx
                    int maxXpos = pbCanvas.Size.Width / Settings.Witdth;
                    int maxYpos = pbCanvas.Size.Height / Settings.Height;

                    if (
                        Snake[i].x < 0 || Snake[i].y < 0 ||
                        Snake[i].x > maxXpos || Snake[i].y > maxYpos
                        )
                    {
                        //end the game is snake either reaches edge of the canvas
                        die();
                    }
                    //or detect collision with the body
                    //this loop cheks if the snake has collision with body
                    for (int j = i; j < Snake.Count; j++)
                    {
                        if (Snake[i].x == Snake[j].x && Snake[i].y == Snake[j].y)
                        {
                            //if so run the die
                            die();
                        }
                    }

                    //detect collision between snake and food
                    if (Snake[0].x == food.x && Snake[0].y == food.y)
                    {
                        //if so run eat
                        eat();
                    }
                }
                else
                {
                    //if no collision then continue move the head and the body
                    Snake[i].x = Snake[i - 1].x;
                    Snake[i].y = Snake[i - 1].y;
                }
            }
        }


        private void keyisdown(object sender, KeyEventArgs e)
        {
            //key down event triggers the change state from the input class
            Input.changeState(e.KeyCode, true);
        }

        private void keyisup(object sender, KeyEventArgs e)
        {
            //the key up event will triggers change state from the input class
            Input.changeState(e.KeyCode, false);
        }

        private void updateGraphics(object sender, PaintEventArgs e)
        {
            //this is where we will see the snake and its parts moving

            Graphics canvas = e.Graphics; //create new graphics class called canvas

            if (Settings.GameOver == false)
            {
                //if game not over then do the following

                Brush snakeColour; //Create new brush called snake colour

                //run loop to check the snake parts
                for (int i = 0; i < Snake.Count; i++)
                {
                    if (i == 0)
                    {
                        //colour the head black
                        snakeColour = Brushes.Black;
                    }
                    else
                    {
                        //rest of the body can be green
                        snakeColour = Brushes.Green;
                    }
                    //draw snake body and head
                    canvas.FillEllipse(snakeColour,
                        new Rectangle(
                            Snake[i].x * Settings.Witdth,
                            Snake[i].y * Settings.Height,
                            Settings.Witdth, Settings.Height
                            ));
                    //draw food
                    canvas.FillEllipse(Brushes.Red,
                        new Rectangle(
                            food.x * Settings.Witdth,
                            food.y * Settings.Height,
                            Settings.Witdth, Settings.Height
                            ));
                }

            }
            else
            {
                //this runs when game is over
                //will show the game over text

                string gameOver = "Game Over \n" + "Final Score is " + Settings.Score + "\n Press enter to Restart \n";
                label3.Text = gameOver;
                label3.Visible = true;
            }
            
         class Circle
    {
        public int x { get; set; }
        public int y { get; set; }

        public Circle()
        {
            //this function resets the x and y to 0
            x = 0;
            y = 0;
        
        public enum Directions
    {
        //with enum its easier to calssify directions
        //for this game

        Left,
        Right,
        Up,
        Down
    };
    class Settings
    {
        public static int Witdth { get; set; }
        public static int Height { get; set; }
        public static int Speed { get; set; }
        public static int Score { get; set; }
        public static int Points { get; set; }
        public static bool GameOver { get; set; }
        public static Directions direction { get; set; }

        public Settings()
        {
            //Default settings function
            Witdth = 16;
            Height = 16;
            Speed = 20;
            Score = 0;
            Points = 100;
            GameOver = false;
            direction = Directions.Down;
        }
     }
            static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
            
        }
    }
}
